# workaround
language: generic

# tell travis CI that superadmin is required
sudo: required

# tell travis CI you need a copy of docker
services:
    - docker

# tell travis to build image using Dockerfile.dev for testing
# "react-test" is just an arbitrary name here
before_install:
    - docker build -t kidobi/react-test -f ./client/Dockerfile.dev ./client

# tell travis how to run test suite
# NOTE: run command is slightly different. have to use -e to set environment variable
# CI=true so that test runs and exits non-interactively
script:
    - docker run -e CI=true kidobi/react-test npm run test

# after success, build the prod artifacts
after_success:
    - docker build -t kidobi/multi-docker-client ./client
    - docker build -t kidobi/multi-docker-nginx ./nginx
    - docker build -t kidobi/multi-docker-server ./server
    - docker build -t kidobi/multi-docker-worker ./worker
    
    # login to docker CLI (actual values are set up as encrypted environment variables in Travis dashboard)
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
    
    # take these images and push to docker-hub
    - docker push kidobi/multi-docker-client
    - docker push kidobi/multi-docker-nginx
    - docker push kidobi/multi-docker-server
    - docker push kidobi/multi-docker-worker
 
# last step is to deploy out project over to elastic beanstalk
deploy:
    # this line below is just a workaround for some issues
    edge: true
    provider: elasticbeanstalk
    region: us-west-1
    app: multi-docker
    env: MultiDocker-env-2
    bucket_name: elasticbeanstalk-us-west-1-403263076102
    bucket_path: multi-docker
    on:
        branch: master    
    access_key_id: $AWS_ACCESS_KEY
    secret_access_key: $AWS_SECRET_KEY
